// Mocks generated by Mockito 5.4.6 from annotations
// in challenge_pinapp/test/presentation/ui/screens/detail/detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:challenge_pinapp/domain/entities/comment.dart' as _i6;
import 'package:challenge_pinapp/domain/entities/failure.dart' as _i5;
import 'package:challenge_pinapp/domain/use_cases/get_post_comments_use_case.dart'
    as _i2;
import 'package:challenge_pinapp/domain/use_cases/like_comment_use_case.dart'
    as _i8;
import 'package:dart_either/dart_either.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GetPostCommentsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPostCommentsUseCase extends _i1.Mock
    implements _i2.GetPostCommentsUseCase {
  MockGetPostCommentsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<_i5.Failure, List<_i6.Comment>>> execute(int? postId) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [postId]),
            returnValue:
                _i3.Future<_i4.Either<_i5.Failure, List<_i6.Comment>>>.value(
                  _i7.dummyValue<_i4.Either<_i5.Failure, List<_i6.Comment>>>(
                    this,
                    Invocation.method(#execute, [postId]),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, List<_i6.Comment>>>);
}

/// A class which mocks [LikeCommentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLikeCommentUseCase extends _i1.Mock
    implements _i8.LikeCommentUseCase {
  MockLikeCommentUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<_i5.Failure, bool>> execute({
    required int? postId,
    required bool? isLiked,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [], {
              #postId: postId,
              #isLiked: isLiked,
            }),
            returnValue: _i3.Future<_i4.Either<_i5.Failure, bool>>.value(
              _i7.dummyValue<_i4.Either<_i5.Failure, bool>>(
                this,
                Invocation.method(#execute, [], {
                  #postId: postId,
                  #isLiked: isLiked,
                }),
              ),
            ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, bool>>);
}
